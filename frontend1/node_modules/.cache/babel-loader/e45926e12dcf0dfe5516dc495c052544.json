{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletProvider = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\n\nconst Session_1 = require(\"../relay/Session\");\n\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\"; // Indicates chain has been switched by switchEthereumChain or addEthereumChain request\n\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\nconst HAS_CHAIN_OVERRIDDEN_FROM_RELAY = \"HasChainOverriddenFromRelay\";\n\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    var _a, _b;\n\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this._send = this.send.bind(this);\n    this._sendAsync = this.sendAsync.bind(this);\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.genericRequest = this.genericRequest.bind(this);\n    this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    this.diagnostic = options.diagnosticLogger;\n    this.reloadOnDisconnect = true;\n    this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    this.qrUrl = options.qrUrl;\n    this.supportsAddressSwitching = options.supportsAddressSwitching;\n    const chainId = this.getChainId();\n    const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16)); // indicate that we've connected, for EIP-1193 compliance\n\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n\n    const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n\n    if (this._addresses.length > 0) {\n      void this.initializeRelay();\n    }\n\n    window.addEventListener(\"message\", event => {\n      var _a;\n\n      if (event.data.type !== \"walletLinkMessage\") return; // compatibility with CBW extension\n\n      if (event.data.data.action === \"defaultChainChanged\") {\n        const _chainId = event.data.data.chainId;\n        const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n        this.updateProviderInfo(jsonRpcUrl, Number(_chainId), true);\n      }\n    });\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n\n  get chainId() {\n    return (0, util_1.prepend0x)(this.getChainId().toString(16));\n  }\n\n  get isWalletLink() {\n    // backward compatibility\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n\n\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n\n  get host() {\n    return this.jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  }\n\n  get jsonRpcUrl() {\n    var _a;\n\n    return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n  }\n\n  set jsonRpcUrl(value) {\n    this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n  }\n\n  get isChainOverridden() {\n    return this._storage.getItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY) === \"true\";\n  }\n\n  set isChainOverridden(value) {\n    this._storage.setItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY, value.toString());\n  }\n\n  disableReloadOnDisconnect() {\n    this.reloadOnDisconnect = false;\n  } // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n\n\n  setProviderInfo(jsonRpcUrl, chainId) {\n    if (this.isChainOverridden) return;\n    this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n  }\n\n  updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n    const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n    if (hasChainSwitched && fromRelay) return;\n\n    if (fromRelay) {\n      this.isChainOverridden = true;\n    }\n\n    this.jsonRpcUrl = jsonRpcUrl; // emit chainChanged event if necessary\n\n    const originalChainId = this.getChainId();\n\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n\n    const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n\n  async watchAsset(type, address, symbol, decimals, image, chainId) {\n    const relay = await this.initializeRelay();\n    const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n    return !!result.result;\n  }\n\n  async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n    var _a, _b;\n\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return false;\n    }\n\n    const relay = await this.initializeRelay();\n    const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n\n    if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n      await relay.requestEthereumAccounts().promise;\n    }\n\n    const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n\n    if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n      this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n\n      this.updateProviderInfo(rpcUrls[0], chainId, false);\n    }\n\n    return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n  }\n\n  async switchEthereumChain(chainId) {\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return;\n    }\n\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10)).promise;\n\n    if (res.errorCode) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: res.errorCode\n      });\n    }\n\n    const switchResponse = res.result;\n\n    if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n      this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n\n      this.updateProviderInfo(switchResponse.rpcUrl, chainId, false);\n    }\n  }\n\n  setAppInfo(appName, appLogoUrl) {\n    void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n\n  async enable() {\n    var _a;\n\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::enable\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n\n    if (this._addresses.length > 0) {\n      return [...this._addresses];\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  async close() {\n    const relay = await this.initializeRelay();\n    relay.resetAndReload();\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  async sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n    return this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n\n    const newParams = params === undefined ? [] : params; // Coinbase Wallet Requests\n\n    const id = this._relayEventManager.makeRequestId();\n\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async genericRequest(data, action) {\n    const relay = await this.initializeRelay();\n    const res = await relay.genericRequest(data, action).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async selectProvider(providerOptions) {\n    const relay = await this.initializeRelay();\n    const res = await relay.selectProvider(providerOptions).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses, isDisconnect) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n\n    if (this._addresses.length > 0 && this.supportsAddressSwitching === false && !isDisconnect) {\n      /**\n       * The extension currently doesn't support switching selected wallet index\n       * make sure walletlink doesn't update it's address in this case\n       */\n      return;\n    }\n\n    this._addresses = newAddresses;\n    this.emit(\"accountsChanged\", this._addresses);\n\n    this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => res && resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  async _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n        return this._cbwallet_arbitrary(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n        return this._wallet_addEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n        return this._wallet_switchEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n        return this._wallet_watchAsset(params);\n    }\n\n    const relay = await this.initializeRelay();\n    return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const addressStr = (0, util_1.ensureAddressString)(addressString);\n\n      const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n\n      return lowercaseAddresses.includes(addressStr);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    var _a;\n\n    if (!this._isKnownAddress(addressString)) {\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n    const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n    const chainId = this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _isAuthorized() {\n    return this._addresses.length > 0;\n  }\n\n  _requireAuthorization() {\n    if (!this._isAuthorized()) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return [...this._addresses];\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n\n  _eth_chainId() {\n    return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n  }\n\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n    const chainId = parseInt(chainIdStr, 10);\n    return (0, util_1.ensureIntNumber)(chainId);\n  }\n\n  async _eth_requestAccounts() {\n    var _a;\n\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::_eth_requestAccounts\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts().promise;\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const message = (0, util_1.ensureBuffer)(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  /** @deprecated */\n\n\n  async _cbwallet_arbitrary(params) {\n    const action = params[0];\n    const data = params[1];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    if (typeof action !== \"object\" || action === null) {\n      throw new Error(\"parameter must be an object\");\n    }\n\n    const result = await this.genericRequest(action, data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  async _wallet_addEthereumChain(params) {\n    var _a, _b, _c, _d;\n\n    const request = params[0];\n\n    if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `please pass in at least 1 rpcUrl`\n        }\n      };\n    }\n\n    if (!request.chainName || request.chainName.trim() === \"\") {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"chainName is a required field\"\n      });\n    }\n\n    if (!request.nativeCurrency) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"nativeCurrency is a required field\"\n      });\n    }\n\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n\n    if (success) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: null\n      };\n    } else {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `unable to add ethereum chain`\n        }\n      };\n    }\n  }\n\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    await this.switchEthereumChain(parseInt(request.chainId, 16));\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: null\n    };\n  }\n\n  async _wallet_watchAsset(params) {\n    const request = Array.isArray(params) ? params[0] : params;\n\n    if (!request.type) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Type is required\"\n      });\n    }\n\n    if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: `Asset of type '${request.type}' is not supported`\n      });\n    }\n\n    if (!(request === null || request === void 0 ? void 0 : request.options)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Options are required\"\n      });\n    }\n\n    if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Address is required\"\n      });\n    }\n\n    const chainId = this.getChainId();\n    const {\n      address,\n      symbol,\n      image,\n      decimals\n    } = request.options;\n    const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n      relay.setChainCallback((chainId, jsonRpcUrl) => {\n        this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10), true);\n      });\n      this._relay = relay;\n      return relay;\n    });\n  }\n\n}\n\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;","map":{"version":3,"sources":["/Users/jungdaljean/Downloads/thru/frontend1/node_modules/@coinbase/wallet-sdk/dist/provider/CoinbaseWalletProvider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","CoinbaseWalletProvider","safe_event_emitter_1","require","bn_js_1","eth_rpc_errors_1","DiagnosticLogger_1","Session_1","WalletSDKRelayAbstract_1","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","SubscriptionManager_1","DEFAULT_CHAIN_ID_KEY","DEFAULT_JSON_RPC_URL","HAS_CHAIN_BEEN_SWITCHED_KEY","HAS_CHAIN_OVERRIDDEN_FROM_RELAY","default","constructor","options","_a","_b","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","_send","send","bind","_sendAsync","sendAsync","setProviderInfo","updateProviderInfo","getChainId","setAppInfo","enable","close","request","_setAddresses","scanQRCode","genericRequest","_jsonRpcUrlFromOpts","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","diagnostic","diagnosticLogger","reloadOnDisconnect","isCoinbaseWallet","overrideIsCoinbaseWallet","isCoinbaseBrowser","overrideIsCoinbaseBrowser","qrUrl","supportsAddressSwitching","chainId","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","LOCAL_STORAGE_ADDRESSES_KEY","addresses","split","map","address","ensureAddressString","events","on","notification","type","method","data","params","length","initializeRelay","window","addEventListener","event","action","_chainId","Number","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setItem","isChainOverridden","disableReloadOnDisconnect","fromRelay","hasChainSwitched","originalChainId","chainChanged","ensureIntNumber","watchAsset","symbol","decimals","image","relay","result","promise","addEthereumChain","rpcUrls","blockExplorerUrls","chainName","iconUrls","nativeCurrency","isWhitelistedNetworkOrStandalone","inlineAddEthereumChain","_isAuthorized","requestEthereumAccounts","res","isApproved","switchEthereumChain","errorCode","ethErrors","provider","custom","code","switchResponse","rpcUrl","appName","appLogoUrl","then","log","EVENTS","ETH_ACCOUNTS_STATE","addresses_length","sessionIdHash","Session","hash","session","id","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","_sendRequestAsync","callback","requests","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","selectProvider","providerOptions","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","isDisconnect","newAddresses","JSON","stringify","join","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","cbWallet_arbitrary","_cbwallet_arbitrary","wallet_addEthereumChain","_wallet_addEthereumChain","wallet_switchEthereumChain","_wallet_switchEthereumChain","wallet_watchAsset","_wallet_watchAsset","makeEthereumJSONRPCRequest","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","addressStr","lowercaseAddresses","includes","_ensureKnownAddress","UNKNOWN_ADDRESS_ENCOUNTERED","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","_c","_d","error","trim","chainIdNumber","success","invalidParams","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","accounts","setChainCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletProvider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\nconst Session_1 = require(\"../relay/Session\");\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\n// Indicates chain has been switched by switchEthereumChain or addEthereumChain request\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\nconst HAS_CHAIN_OVERRIDDEN_FROM_RELAY = \"HasChainOverriddenFromRelay\";\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        var _a, _b;\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this._send = this.send.bind(this);\n        this._sendAsync = this.sendAsync.bind(this);\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.genericRequest = this.genericRequest.bind(this);\n        this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        this.diagnostic = options.diagnosticLogger;\n        this.reloadOnDisconnect = true;\n        this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        this.qrUrl = options.qrUrl;\n        this.supportsAddressSwitching = options.supportsAddressSwitching;\n        const chainId = this.getChainId();\n        const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params,\n            });\n        });\n        if (this._addresses.length > 0) {\n            void this.initializeRelay();\n        }\n        window.addEventListener(\"message\", event => {\n            var _a;\n            if (event.data.type !== \"walletLinkMessage\")\n                return; // compatibility with CBW extension\n            if (event.data.data.action === \"defaultChainChanged\") {\n                const _chainId = event.data.data.chainId;\n                const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n                this.updateProviderInfo(jsonRpcUrl, Number(_chainId), true);\n            }\n        });\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    get chainId() {\n        return (0, util_1.prepend0x)(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        // backward compatibility\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this.jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    get jsonRpcUrl() {\n        var _a;\n        return ((_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts);\n    }\n    set jsonRpcUrl(value) {\n        this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n    }\n    get isChainOverridden() {\n        return this._storage.getItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY) === \"true\";\n    }\n    set isChainOverridden(value) {\n        this._storage.setItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY, value.toString());\n    }\n    disableReloadOnDisconnect() {\n        this.reloadOnDisconnect = false;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    setProviderInfo(jsonRpcUrl, chainId) {\n        if (this.isChainOverridden)\n            return;\n        this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n    }\n    updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n        const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n        if (hasChainSwitched && fromRelay)\n            return;\n        if (fromRelay) {\n            this.isChainOverridden = true;\n        }\n        this.jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async watchAsset(type, address, symbol, decimals, image, chainId) {\n        const relay = await this.initializeRelay();\n        const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n        return !!result.result;\n    }\n    async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n        var _a, _b;\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return false;\n        }\n        const relay = await this.initializeRelay();\n        const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n        if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n            await relay.requestEthereumAccounts().promise;\n        }\n        const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n        if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n            this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n            this.updateProviderInfo(rpcUrls[0], chainId, false);\n        }\n        return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n    }\n    async switchEthereumChain(chainId) {\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return;\n        }\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10)).promise;\n        if (res.errorCode) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: res.errorCode,\n            });\n        }\n        const switchResponse = res.result;\n        if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n            this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n            this.updateProviderInfo(switchResponse.rpcUrl, chainId, false);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::enable\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return [...this._addresses];\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    async close() {\n        const relay = await this.initializeRelay();\n        relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params,\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    async sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        return this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args,\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // Coinbase Wallet Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id,\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async genericRequest(data, action) {\n        const relay = await this.initializeRelay();\n        const res = await relay.genericRequest(data, action).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async selectProvider(providerOptions) {\n        const relay = await this.initializeRelay();\n        const res = await relay.selectProvider(providerOptions).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id,\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses, isDisconnect) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        if (this._addresses.length > 0 &&\n            this.supportsAddressSwitching === false &&\n            !isDisconnect) {\n            /**\n             * The extension currently doesn't support switching selected wallet index\n             * make sure walletlink doesn't update it's address in this case\n             */\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult,\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result,\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => res && resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    async _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n                return this._cbwallet_arbitrary(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n                return this._wallet_addEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n                return this._wallet_switchEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n                return this._wallet_watchAsset(params);\n        }\n        const relay = await this.initializeRelay();\n        return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const addressStr = (0, util_1.ensureAddressString)(addressString);\n            const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n            return lowercaseAddresses.includes(addressStr);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        var _a;\n        if (!this._isKnownAddress(addressString)) {\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? (0, util_1.ensureAddressString)(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n        const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null\n            ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas)\n            : null;\n        const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n        const chainId = this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId,\n        };\n    }\n    _isAuthorized() {\n        return this._addresses.length > 0;\n    }\n    _requireAuthorization() {\n        if (!this._isAuthorized()) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return [...this._addresses];\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n        const chainId = parseInt(chainIdStr, 10);\n        return (0, util_1.ensureIntNumber)(chainId);\n    }\n    async _eth_requestAccounts() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::_eth_requestAccounts\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses,\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts().promise;\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const message = (0, util_1.ensureBuffer)(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    /** @deprecated */\n    async _cbwallet_arbitrary(params) {\n        const action = params[0];\n        const data = params[1];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        if (typeof action !== \"object\" || action === null) {\n            throw new Error(\"parameter must be an object\");\n        }\n        const result = await this.genericRequest(action, data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        var _a, _b, _c, _d;\n        const request = params[0];\n        if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `please pass in at least 1 rpcUrl` },\n            };\n        }\n        if (!request.chainName || request.chainName.trim() === \"\") {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"chainName is a required field\",\n            });\n        }\n        if (!request.nativeCurrency) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"nativeCurrency is a required field\",\n            });\n        }\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n        if (success) {\n            return { jsonrpc: \"2.0\", id: 0, result: null };\n        }\n        else {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `unable to add ethereum chain` },\n            };\n        }\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = params[0];\n        await this.switchEthereumChain(parseInt(request.chainId, 16));\n        return { jsonrpc: \"2.0\", id: 0, result: null };\n    }\n    async _wallet_watchAsset(params) {\n        const request = (Array.isArray(params) ? params[0] : params);\n        if (!request.type) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Type is required\",\n            });\n        }\n        if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: `Asset of type '${request.type}' is not supported`,\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Options are required\",\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Address is required\",\n            });\n        }\n        const chainId = this.getChainId();\n        const { address, symbol, image, decimals } = request.options;\n        const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n            relay.setChainCallback((chainId, jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10), true);\n            });\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;\n"]},"metadata":{},"sourceType":"script"}